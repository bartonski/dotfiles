#! /usr/bin/perl

use warnings;
use strict;
use Text::Wrap qw( wrap );

$Text::Wrap::columns=20;
$Text::Wrap::separator='\n';


my %shape = (
      'foreach' => 'shape=trapezium'
    , 'end foreach' => 'shape=trapezium orientation=180'
    , 'if' => 'shape=diamond'
    , 'end if' => 'foo'
    , 'call subroutine' => 'shape=house orientation=180'
    , 'subroutine' => 'shape=house orientation=180'
    , 'end subroutine' => 'shape=house'
    , 'process' => 'shape=box'
    , 'script start' => 'shape=oval'
    , 'script end' => 'shape=oval'
    #, 'foo' => 'foo'
    #, 'foo' => 'foo'
    #, 'foo' => 'foo'
);

my @links;

print "digraph {\n";

while( <> ) {
    chomp;
    my @captures;
    if( @captures = /## (->)*(.*):(.+): (.+)/) {
        my ( $link, $connectorlabel, $type, $message ) = @captures;
        $message = "End $message" if( $type =~ /^end/ );
        my $nodename = $message;
        $nodename = "Call $nodename" if( $type =~ /^call/ );
        $nodename =~ s/\W//g;
        $message = wrap( '', '', $message );
        print "    ";
        print qq("$nodename" [);
        print qq(label="$message" $shape{$type});
        print "]\n";
        push( @links, [ $nodename, $link, $connectorlabel ] );
    }
}

my $temp = shift @links;
my $oldnodename = $temp->[0];

for my $ref ( @links ) {
    my ( $nname, $nlink, $ncname ) = @$ref;
    if( $nlink eq "->" ) {
        print qq(    "$oldnodename" -> "$nname" [label="$ncname"]\n);
    }
    $oldnodename=$nname;
}
print "}\n";
