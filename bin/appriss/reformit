#!/usr/bin/env ruby

##############################################################################
# reformit.rb
#
# Turns a preproc-processed data file into a rainbow-colored HTML table
# with repeating column headers and different coloration for each record 
# type. 
#
# Features:
# - Skips columns that are always blank.
# - Puts original column number as the tooltip for each column heading.
# - Prefixes field with '>' if it contained leading spaces
# - Finished HTML files reference external CSS file 'colorized.css'
#     where you can put custom table formatting if needed.
#
# Requirements:
# - Expects a reform.ini in the current directory.
# - Expects to find each record type as a [RECORD xxxx] layout section
#     (but understands AN/AM -> [RECORD ALIAS] and IM -> [RECORD IMAGE]).
#
# Terribly-commented, really. Implemented out of an absolute need to 
# visualize fixed-width data. Quick-and-dirty complement to Nenad's
# RADAR tool.
#
# Date        Author              Description
# ----------  ------------------  --------------------------------------------
# 2009/05/06  T. Knowlton         Initial Implementation
# 2011/11/14  T. Knowlton         Added a fix for bad UTF-8 characters in 
#                                   reform.ini (usually copyright char)
#
##############################################################################

# Convenient class for storing RGB colors as an array of 0-255 values
class Color
  def initialize(r=0, g=0, b=0)
    @color = [r.to_i, g.to_i, b.to_i]
  end

  def method_missing(method, *args)
    @color.send(method, *args)
  end

  def to_s
    return '#' + @color.inject('') { |color, val| color + val.to_i.to_s(16).upcase.rjust(2, '0') }
  end
  
  def to_css_classname
    return 'rgb' + self.to_s.sub( '#', '' )
  end
  
  def to_css_rule
    return ".#{self.to_css_classname} { background-color: #{self.to_s}; }"
  end
  
  def darken!(n = 40)
    @color.length.times do |i|
      @color[i] -= n
    end

    self.normalize!

    return self
  end
  
  def darken(n = 40)
    c = Color.new
    
    @color.length.times do |i|
      c[i] = @color[i] - n
    end

    c.normalize!

    return c
  end

  def lighten!(n = 40)
    self.darken!(-n)
  end
  
  def lighten(n = 40)
    self.darken(-n)
  end

  def [](n)
    return nil unless (0..2).include?(n)
    return @color[n]
  end
  
  def []=(n, val)
    return nil unless (0..2).include?(n)
    @color[n] = val.to_i    
  end

  def normalize!
    @color.length.times do |i|
      @color[i] = 0 if @color[i] < 0
      @color[i] = 255 if @color[i] > 255
    end
  end
  
end


# These functions adapted from http://www.rujubu.com/blog/articles/2007/12/12/color-wheel-generation

def ramp(step, total_steps)
  (255 * Math::sin(Math::PI/2.0/total_steps * step)).round
end

# Generates the color sequence for a color wheel containting the specified
# number of positions.  If positions is not a multiple of 3, it will be
# rounded up to the next multiple.
def color_wheel(positions)
  sps = (positions/3.0).ceil # steps per segment
  colors = []
  (0...sps).each do |step|
    colors << Color.new(ramp(sps - step, sps), ramp(step, sps), 0)
  end
  (0...sps).each do |step|
    colors << Color.new(0, ramp(sps - step, sps), ramp(step, sps))
  end
  (0...sps).each do |step|
    colors << Color.new(ramp(step, sps), 0, ramp(sps - step, sps))
  end
  colors
end



unless defined?(ARGV[0]) && File.exists?(ARGV[0].to_s)
  puts "Usage: #{__FILE__} vinenew.dat"
  puts "       (expects corresponding reform.ini in current dir)"
  exit 1
end

record_defs = {}
sender_id = ''
colors = color_wheel(12).collect { |color| color.lighten(110) }

# Repeat
colors = colors * 10

File.open('reform.ini') do |f|
  reading_rec = false
  record_type = ''
  
  f.each_line do |line|
    # Fixer for invalid UTF-8 characters
    line.encode! :invalid => :replace, :undef => :replace, :replace => ' '

    # Compress whitespace and use it to split the line into parts
    line = line.strip.sub(/\t/, ' ').squeeze(' ')
    parts = line.split(/ /)

    case true
      when !!(parts[0].to_s =~ /^\*/)
        line_type = :comment
      when !!(parts[0].to_s =~ /^\[/)
        line_type = :header
      when parts[1].to_s == '=' && parts.length == 4
        line_type = :layout
      when parts[0].to_s == 'SENDER_ID'
        sender_id = parts[2]
        next
      else
        line_type = :unknown
    end

    next if line_type == :comment
    
    if line_type == :header && parts[0] == '[RECORD'
      record_type = parts[1].sub(']', '')
      record_defs[record_type] = []
      reading_rec = true
      next
    elsif line_type == :header
      reading_rec = false
      next
    end
    
    if line_type == :layout && reading_rec
      record_defs[record_type] << { :name => parts[0], 
                                    :start => parts[2].to_i, 
                                    :stop => parts[2].to_i + parts[3].to_i - 1,
                                    :empty => true }
      next
    end
  end
end



# Open the data file and the HTML output file
infile = File.open(ARGV[0])
outfile = File.open(ARGV[0] + '.html', 'w')
record_type = ''
last_record_type = ''

# Check for columns that are always empty, flag them
infile.each_line do |line|
  record_type = line[0..1].strip
  
  record_type = 'ALIAS' if record_type =~ /^A[NM]/
  record_type = 'IMAGE' if record_type =~ /^IM/

  next unless record_defs[record_type]
  
  record_defs[record_type].each_with_index do |col, idx|
    start = col[:start] - 1
    stop = col[:stop] - 1
    record_defs[record_type][idx][:empty] = false if line[start..stop].to_s.strip.length > 0
  end
end

infile.rewind

# Write output header
outfile.puts <<END
<html>
  <head>
    <title>Colorized #{ARGV[0]}</title>
    <link rel="stylesheet" type="text/css" href="colorized.css">
    <style type="text/css">
      #{ colors.map { |color| color.to_css_rule }.join("\n") }
      #{ colors.map { |color| color.darken.to_css_rule }.join("\n") }
    </style>
  </head>
  <body>
    <h2>Processed data for #{sender_id}</h2>
    <table>
      <tbody>
END

# Colorize!
infile.each_with_index do |line, idx|
  next if line =~ /^[<!]/
  
  record_type = line[0..1].strip
  
  record_type = 'ALIAS' if record_type =~ /^A[NM]/
  record_type = 'IMAGE' if record_type =~ /^IM/

  unless record_defs[record_type]
    puts "Unknown record type '#{record_type.to_s}'"
    next
  end
  
  # Print column headers
  if idx % 20 == 0 || record_type != last_record_type
    # Rotate column colors
    if idx > 1 && record_type != last_record_type
      5.times { colors.unshift(colors.pop) }
      idx = 1
    end
        
    i = 0
    outfile.puts '<tr class="heading">'
    record_defs[record_type].each_with_index do |col, col_idx|
      # Skip empty columns, choose a darker color for headings
      next if col[:empty]
      cellcolor = colors[i].darken
#      outfile.puts sprintf( '<td style="background-color: %s" class="col_%s" title="%s">%s</td>',
#        cellcolor, i.to_s, (col_idx+1).to_s, col[:name] )
      outfile.puts sprintf( '<td class="col_%s %s" title="%s">%s</td>',
        i.to_s, cellcolor.to_css_classname, (col_idx+1).to_s, col[:name] )
      i += 1
    end
    outfile.puts '</tr>'
  end
  
  # Print data row
  i = 0
  outfile.puts '<tr class="data">'
  record_defs[record_type].each do |col, idx|
    # Skip empty columns
    next if col[:empty]
    start = col[:start] - 1
    stop = col[:stop] - 1
    cellcolor = colors[i]
#    outfile.puts '<td style="background-color: ' + cellcolor + '" class="col_' + i.to_s + '">' + 
#                 line[start..stop].to_s.gsub(/^\s+$/, '').gsub(/^\s+/, '<span title="Leading spaces found">-&gt;</span> ').strip + 
#                 '&nbsp;' + '</td>'
    outfile.puts '<td class="col_' + i.to_s + ' ' + cellcolor.to_css_classname + '">' + 
                 line[start..stop].to_s.gsub(/^\s+$/, '').gsub(/^\s+/, '<span title="Leading spaces found">-&gt;</span> ').strip + 
                 '&nbsp;' + '</td>'
    i += 1
  end
  outfile.puts '</tr>'
  
  last_record_type = record_type
end

# Write footer
outfile.puts <<END
      </tbody>
    </table>
  </body>
</html>
END

# Clean up
outfile.close
infile.close
